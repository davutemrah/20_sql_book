# Adhoc solutions

## Risky Projects

Identify projects that are at risk for going overbudget. A project is considered to be overbudget if the cost of all employees assigned to the project is greater than the budget of the project.

You'll need to prorate the cost of the employees to the duration of the project. For example, if the budget for a project that takes half a year to complete is $10K, then the total half-year salary of all employees assigned to the project should not exceed $10K. Salary is defined on a yearly basis, so be careful how to calculate salaries for the projects that last less or more than one year.

Output a list of projects that are overbudget with their project name, project budget, and prorated total employee expense (rounded to the next dollar amount).

HINT: to make it simpler, consider that all years have 365 days. You don't need to think about the leap years.

Tables: linkedin_projects, linkedin_emp_projects, linkedin_employees


### tables

table: linkedin_projects \

id--int, \
title--varchar \
budget--int \
start_date--datetime \
end_date--datetime \


table: linkedin_emp_projects

emp_id--int \
project_id-- \


table: linkedin_employees

id--int, \
first_name \ 
last_name \ 
salary--int \ 

### SOLUTION 1

DURATION YEAR 1 IS CALCULATED SEPARATELY WILL CAUSE PROBLEMS, BECAUSE IT IS NOT COSTLY TO KEEP IT ACCURATE TO DECIMAL POINTS


```sql
WITH 
PROJECT_DURATION AS (
    SELECT DISTINCT id, DATEDIFF(end_date, start_date)/365.0 AS DURATION_YR
    FROM linkedin_projects
    ORDER BY DURATION_YR DESC
),
COST AS (
    SELECT A.project_id, SUM(B.SALARY * C.DURATION_YR) AS PROJECT_COST
    FROM linkedin_emp_projects A
    INNER JOIN linkedin_employees B ON A.EMP_ID = B.ID
    INNER JOIN PROJECT_DURATION C ON A.project_id = C.ID
    GROUP BY A.project_id
)
SELECT A.TITLE, A.BUDGET, CEILING(B.PROJECT_COST) AS PROJECT_COST
FROM linkedin_projects A
INNER JOIN COST B ON A.ID = B.project_id
WHERE A.BUDGET < CEILING(B.PROJECT_COST)
ORDER BY TITLE ASC;
```



### SOULTION 2 

BETTER SOLUTION

```sql
SELECT 
    A.TITLE, 
    A.BUDGET, 
    CEILING(SUM(B.SALARY) * DATEDIFF(A.end_date, A.start_date) / 365.0) AS PROJECT_COST
FROM linkedin_projects A
LEFT JOIN linkedin_emp_projects C    ON A.ID = C.project_id
LEFT JOIN linkedin_employees B       ON C.EMP_ID = B.ID
GROUP BY A.ID
HAVING  A.BUDGET < PROJECT_COST;
```

